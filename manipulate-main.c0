#use <conio>
#use <string>
#use <args>
#use <parse>
#use <img>

void manipulate_main(string input_w, string input_b, string output) 
{
  print("Input image:  ");
  println(input_w);
  println(input_b);
  print("Output image: ");
  println(output);

  /* Load source image */
  image_t source_w = image_load(input_w);
  image_t source_b = image_load(input_b);

  if (source_w == NULL || source_b == NULL) 
    {error("Could not load source image");}
  int width_w = image_width(source_w);
  int width_b = image_width(source_b);
  int height_w = image_height(source_w);
  int height_b = image_height(source_b);

  if (width_w != width_b || height_w != height_b) 
    {error("Input images dimension doesn't match");}
  pixel[] inpixels_w = image_data(source_w);
  pixel[] inpixels_b = image_data(source_b);
  int width = width_b;
  int height = height_b;

  print("Loaded image.  Dimensions are ");
  printint(width);
  print(" by ");
  printint(height);
  println(".");

  /* Run transformation */
  print("Running image manipulation...");
  pixel[] manippixels = manipulate(inpixels_w, inpixels_b, width, height);
  println("done.");
  /*@assert \length(manippixels) ==
        result_width(width, height) * result_height(width, height); @*/

  /* Create destination image */
  int outwidth = result_width(width, height);
  int outheight = result_height(width, height);
  image_t dest = image_create(outwidth, outheight);
  pixel[] outpixels = image_data(dest);
  for (int i = 0; i < outwidth*outheight; i++)
  //@loop_invariant 0 <= i;
  {
    outpixels[i] = manippixels[i];
  }

  /* Save result */
  print("Saving output...");
  image_save(dest, output);
  println("");
}

string default_output(string input_w, string name) {
  int len = string_length(input_w);
  if (!(len > 4 && string_equal(".png", string_sub(input_w, len-4, len)))) {
    error("Input file does not end with .png");
  }

  string res = string_sub(input_w, 0, len-4);
  res = string_join(res, "_");
  res = string_join(res, name);
  res = string_join(res, ".png");

  return res;
}

int main() {
  string *output = alloc(string);
  string *input_w = alloc(string);
  string *input_b = alloc(string);

  args_string("-o", output);
  args_string("-iw", input_w);
  args_string("-ib", input_b);
  args_parse();

  if (string_equal("", *input_w)) {
    error("Usage: manipulate -iw <w_img> -ib <b_img> [-o <output image>]");
  }

  if (string_equal("", *output)) {
    *output = default_output(*input_w, "manipulate");
  }

  manipulate_main(*input_w, *input_b, *output);

  return 0;
}
